name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  schedule:
    - cron: '30 10 * * *'
  push:
    branches: [ master ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ master ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  FFMPEG_VERSION: "5.0.1"
  BASE_IMAGE: "base"
  BUILD_IMAGE: "build"
  RUNTIME_IMAGE: "runtime"
  GOLANG_VERSION: "1"
  JDK_PKG_URL: "https://download.java.net/java/GA/jdk18.0.1.1/65ae32619e2f40f3a9af3af1851d6e19/2/GPL/openjdk-18.0.1.1_linux-x64_bin.tar.gz"
  JDK_VERSION: "18"
  IMAGE_NAME: ${{ github.repository }}


jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@d6a3abf1bdea83574e28d40543793018b6035605
        with:
          cosign-release: 'v1.7.1'


#      # Workaround: https://github.com/docker/build-push-action/issues/461
#      - name: Setup Docker buildx
#        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      - name: Log in to Red Hat Registry
        if: github.event_name != 'pull_request'
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: "ffmpeg-debian:base image building stage"
        id: base-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ env.BASE_IMAGE }}
          containerfiles: |
            ./base/Dockerfile
          build-args: |

      - name: "ffmpeg-debian:<ffmpeg-version>-build image building stage"
        id: build-image
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: ./ffmpeg/${{ env.FFMPEG_VERSION }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FFMPEG_VERSION }}-build
#
#      - name: "ffmpeg-debian:<ffmpeg-version>-runtime image building stage"
#        id: runtime-image
#        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
#        with:
#          context: ./runtime
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FFMPEG_VERSION }}-runtime
#          build-args: |
#            FFMPEG_VERSION=${{ env.FFMPEG_VERSION }}
#
#      - name: "ffmpeg-debian:<ffmpeg-version>-golang-<go-version> image building stage"
#        id: golang-image
#        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
#        with:
#          context: ./golang
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FFMPEG_VERSION }}-golang-${{ env.GOLANG_VERSION }}
#          build-args: |
#            FFMPEG_VERSION=${{ env.FFMPEG_VERSION }}
#            GOLANG_VERSION=${{ env.GOLANG_VERSION }}
#
#      - name: "ffmpeg-debian:<ffmpeg-version>-openjdk-<jdk-version> image building stage"
#        id: openjdk-image
#        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
#        with:
#          context: ./openjdk
#          push: ${{ github.event_name != 'pull_request' }}
#          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.FFMPEG_VERSION }}-openjdk-${{ env.JDK_VERSION }}
#          build-args: |
#            FFMPEG_VERSION=${{ env.FFMPEG_VERSION }}
#            JDK_PKG_URL=${{ env.JDK_PKG_URL }}
#            JDK_VERSION=${{ env.JDK_VERSION }}
#
#      # Sign the resulting Docker image digest except on PRs.
#      # This will only write to the public Rekor transparency log when the Docker
#      # repository is public to avoid leaking data.  If you would like to publish
#      # transparency data even for private images, pass --force to cosign below.
#      # https://github.com/sigstore/cosign
#      - name: Sign the published base image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        # This step uses the identity token to provision an ephemeral certificate
#        # against the sigstore community Fulcio instance.
#        run: cosign sign ${{ steps.base-meta.outputs.tags }}@${{ steps.base-image.outputs.digest }}
#
#      - name: Sign the published build image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        run: cosign sign ${{ steps.build-meta.outputs.tags }}@${{ steps.build-image.outputs.digest }}
#
#      - name: Sign the published runtime image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        run: cosign sign ${{ steps.runtime-meta.outputs.tags }}@${{ steps.runtime-image.outputs.digest }}
#
#      - name: Sign the published golang image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        run: cosign sign ${{ steps.golang-meta.outputs.tags }}@${{ steps.golang-image.outputs.digest }}
#
#      - name: Sign the published openjdk image
#        if: ${{ github.event_name != 'pull_request' }}
#        env:
#          COSIGN_EXPERIMENTAL: "true"
#        run: cosign sign ${{ steps.openjdk-meta.outputs.tags }}@${{ steps.openjdk-image.outputs.digest }}
